class VietnameseShoppingHelper {
    constructor() {
        this.settings = {
            salary: 8000000,
            salaryUnit: 'month',
            taxType: 'after',
            displayUnit: 'auto',
            enabled: true,
            disableBuyButtons: false
        };
        
        this.processedElements = new WeakSet();
        this.processedButtons = new WeakSet();
        this.disabledButtons = new WeakSet();
        this.confirmedButtons = new WeakSet(); // Th√™m: theo d√µi n√∫t ƒë√£ ƒë∆∞·ª£c confirm
        this.observer = null;
        this.isInitialized = false;
        this.debounceTimer = null;
        
        // C·∫£i thi·ªán h·∫±ng s·ªë th·ªùi gian theo y√™u c·∫ßu
        this.timeConstants = {
            hoursPerDay: 8,      // 8 ti·∫øng/ng√†y
            daysPerMonth: 30,    // 30 ng√†y/th√°ng  
            daysPerYear: 365,    // 365 ng√†y/nƒÉm
            hoursPerMonth: 240,  // 30 * 8 = 240 ti·∫øng/th√°ng
            hoursPerYear: 2920   // 365 * 8 = 2920 ti·∫øng/nƒÉm
        };
        
        // H·ªá th·ªëng ph√¢n c·∫•p d·ª±a tr√™n th·ªùi gian l√†m vi·ªác (ng√†y) - Mindful Buying v·ªõi c·∫£nh b√°o ƒë·∫ßy ƒë·ªß
        this.reminderLevels = {
            1: {
                range: [0, 1], // < 1 ng√†y
                emoji: ['üíö', '‚úÖ', 'üòä'],
                level: 'An to√†n',
                color: '#10b981',
                tooltipBg: 'linear-gradient(135deg, #10b981 0%, #059669 100%)',
                reminders: [
                    "üåü ƒê√¢y l√† kho·∫£n chi ti√™u h·ª£p l√Ω trong ng√¢n s√°ch. B·∫°n c√≥ th·ª±c s·ª± c·∫ßn v√† s·∫Ω s·ª≠ d·ª•ng m√≥n n√†y th∆∞·ªùng xuy√™n kh√¥ng?",
                    "üí° M√≥n n√†y c√≥ th·ª±c s·ª± mang l·∫°i gi√° tr·ªã l√¢u d√†i cho cu·ªôc s·ªëng v√† c√¥ng vi·ªác c·ªßa b·∫°n?",
                    "üîç B·∫°n ƒë√£ so s√°nh gi√° ·ªü √≠t nh·∫•t 3 n∆°i kh√°c nhau ch∆∞a? C√≥ th·ªÉ c√≥ n∆°i b√°n r·∫ª h∆°n.",
                    "‚è∞ Li·ªáu b·∫°n c√≥ th·ªÉ ƒë·ª£i ƒë·∫øn khi c√≥ ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i ho·∫∑c sale l·ªõn h∆°n?",
                    "üõçÔ∏è ƒê√¢y c√≥ ph·∫£i l√† th·ª© b·∫°n th·ª±c s·ª± mu·ªën hay ch·ªâ ƒëang trong c∆°n shopping therapy ƒë·ªÉ gi·∫£i t·ªèa stress?"
                ]
            },
            2: {
                range: [1, 3], // 1-3 ng√†y
                emoji: ['üü°', '‚ö†Ô∏è', 'ü§î'],
                level: 'C·∫©n th·∫≠n',
                color: '#f59e0b',
                tooltipBg: 'linear-gradient(135deg, #f59e0b 0%, #d97706 100%)',
                reminders: [
                    "üî• ƒê√ÇY L√Ä 1-3 NG√ÄY L√ÄM VI·ªÜC C·ª¶A B·∫†N! Li·ªáu b·∫°n c√≥ th·ªÉ ƒë·ª£i th√™m ƒë·ªÉ t√¨m gi√° t·ªët h∆°n ho·∫∑c c√¢n nh·∫Øc k·ªπ h∆°n?",
                    "ü§î H√£y t·ª± h·ªèi th√†nh th·∫≠t: 'T√¥i s·∫Ω c·∫£m th·∫•y th·∫ø n√†o n·∫øu kh√¥ng mua m√≥n n√†y? C√≥ th·ª±c s·ª± ·∫£nh h∆∞·ªüng ƒë·∫øn cu·ªôc s·ªëng?'",
                    "üí≠ C√≥ ph·∫£i b·∫°n ƒëang mua v√¨ th·ª±c s·ª± c·∫ßn thi·∫øt hay ch·ªâ v√¨ mu·ªën c√≥ c·∫£m gi√°c s·ªü h·ªØu th·ª© g√¨ ƒë√≥ m·ªõi?",
                    "‚è∞ B·∫°n c√≥ th·ªÉ th·ª≠ √°p d·ª•ng quy t·∫Øc 24 gi·ªù - ƒë·ªÉ ƒë·ª£i 1 ng√†y suy nghƒ© r·ªìi m·ªõi quy·∫øt ƒë·ªãnh mua?",
                    "üí∏ N·∫øu l∆∞∆°ng c·ªßa b·∫°n gi·∫£m xu·ªëng c√≤n m·ªôt n·ª≠a ng√†y mai, b·∫°n c√≥ v·∫´n quy·∫øt ƒë·ªãnh mua m√≥n n√†y kh√¥ng?"
                ]
            },
            3: {
                range: [3, 7], // 3-7 ng√†y (1 tu·∫ßn)
                emoji: ['üî∂', 'üò∞', '‚ö°'],
                level: 'C·∫£nh b√°o nghi√™m tr·ªçng',
                color: '#f97316',
                tooltipBg: 'linear-gradient(135deg, #f97316 0%, #ea580c 100%)',
                reminders: [
                    "üö® ƒê√ÇY L√Ä C·∫¢ M·ªòT TU·∫¶N L√ÄM VI·ªÜC C·ª¶A B·∫†N! B·∫°n c√≥ ho√†n to√†n ch·∫Øc ch·∫Øn ƒë√¢y l√† ∆∞u ti√™n h√†ng ƒë·∫ßu trong cu·ªôc s·ªëng?",
                    "üí≠ Th·ª≠ nghƒ© xem: 'Sau 1 nƒÉm n·ªØa, t√¥i c√≥ c√≤n nh·ªõ ƒë·∫øn vi·ªác mua m√≥n n√†y? N√≥ c√≥ c√≤n quan tr·ªçng?'",
                    "üéØ C√≥ nh·ªØng m·ª•c ti√™u t√†i ch√≠nh n√†o quan tr·ªçng h∆°n ƒëang ch·ªù ƒë·ª£i (mua nh√†, du l·ªãch, h·ªçc t·∫≠p, ƒë·∫ßu t∆∞)?",
                    "üí∞ B·∫°n c√≥ th·ªÉ l√†m g√¨ kh√°c c√≥ √≠ch h∆°n v·ªõi s·ªë ti·ªÅn n√†y ƒë·ªÉ ƒë·∫ßu t∆∞ cho t∆∞∆°ng lai v√† ph√°t tri·ªÉn b·∫£n th√¢n?"
                ]
            },
            4: {
                range: [7, 30], // 1 tu·∫ßn - 1 th√°ng
                emoji: ['üî¥', 'üò±', 'üö®'],
                level: 'NGUY HI·ªÇM - C·∫ßn suy nghƒ© r·∫•t k·ªπ',
                color: '#ef4444',
                tooltipBg: 'linear-gradient(135deg, #ef4444 0%, #dc2626 100%)',
                reminders: [
                    "üö® C·∫¢NH B√ÅO ƒê·ªé: ƒê√¢y l√† t·ª´ 1 tu·∫ßn ƒë·∫øn 1 th√°ng l∆∞∆°ng c·ªßa b·∫°n! B·∫°n ƒë√£ c√≥ qu·ªπ kh·∫©n c·∫•p ƒë·ªß 3-6 th√°ng chi ti√™u ch∆∞a?",
                    "üí• Li·ªáu m√≥n n√†y c√≥ th·ª±c s·ª± thay ƒë·ªïi cƒÉn b·∫£n ch·∫•t l∆∞·ª£ng cu·ªôc s·ªëng, c√¥ng vi·ªác hay s·ª©c kh·ªèe c·ªßa b·∫°n?",
                    "üò¥ H√£y ng·ªß √≠t nh·∫•t m·ªôt ƒë√™m v√† tham kh·∫£o √Ω ki·∫øn c·ªßa √≠t nh·∫•t 2-3 ng∆∞·ªùi th√¢n tin c·∫≠y tr∆∞·ªõc khi quy·∫øt ƒë·ªãnh!",
                    "üíº N·∫øu b·∫°n b·∫•t ng·ªù m·∫•t vi·ªác v√†o ng√†y mai, m√≥n n√†y c√≥ gi√∫p b·∫°n t√¨m ƒë∆∞·ª£c vi·ªác m·ªõi nhanh h∆°n kh√¥ng?"
                ]
            },
            5: {
                range: [30, Infinity], // > 1 th√°ng
                emoji: ['üí•', 'üö®', '‚õî', 'üõë'],
                level: 'C·ª∞C K·ª≤ NGUY HI·ªÇM - C·∫ßn k·∫ø ho·∫°ch chi ti·∫øt',
                color: '#dc2626',
                tooltipBg: 'linear-gradient(135deg, #dc2626 0%, #991b1b 50%, #7f1d1d 100%)',
                reminders: [
                    "üö® C·∫¢NH B√ÅO ƒê·ªé T·ªêI ƒêA: ƒê√¢y l√† h∆°n 1 th√°ng l∆∞∆°ng! B·∫°n c√≥ k·∫ø ho·∫°ch t√†i ch√≠nh chi ti·∫øt v√† d√†i h·∫°n kh√¥ng?",
                    "üí° M√≥n n√†y c√≥ th·ª±c s·ª± l√† ƒëi·ªÅu c·∫ßn thi·∫øt cho s·ª± nghi·ªáp, s·ª©c kh·ªèe hay h·∫°nh ph√∫c l√¢u d√†i c·ªßa b·∫°n?",
                    "üìà B·∫°n ƒë√£ t√≠nh to√°n c·ª• th·ªÉ t√°c ƒë·ªông ƒë·∫øn m·ª•c ti√™u ti·∫øt ki·ªám, ƒë·∫ßu t∆∞ v√† k·∫ø ho·∫°ch ngh·ªâ h∆∞u ch∆∞a?",
                    "üö® D·ª™NG L·∫†I NGAY B√ÇY GI·ªú! ƒê√¢y l√† s·ªë ti·ªÅn KH·ªîNG L·ªí c√≥ th·ªÉ thay ƒë·ªïi t∆∞∆°ng lai t√†i ch√≠nh - h√£y suy nghƒ© √≠t nh·∫•t 1 tu·∫ßn!"
                ]
            }
        };
        
        this.init();
    }
    
    async init() {
        console.log('üöÄ Vietnamese Shopping Helper v1.6.2 - Kh·ªüi ƒë·ªông v·ªõi c·∫£nh b√°o 1 l·∫ßn...');
        
        try {
            await this.loadSettings();
            this.setupMessageListener();
            
            if (document.readyState === 'loading') {
                document.addEventListener('DOMContentLoaded', () => this.startProcessing());
            } else {
                this.startProcessing();
            }
            
            this.isInitialized = true;
            console.log('‚úÖ Extension ƒë√£ kh·ªüi ƒë·ªông th√†nh c√¥ng');
        } catch (error) {
            console.error('‚ùå L·ªói kh·ªüi ƒë·ªông extension:', error);
        }
    }
    
    async loadSettings() {
        try {
            const result = await chrome.storage.sync.get({
                salary: 8000000,
                salaryUnit: 'month',
                taxType: 'after',
                displayUnit: 'auto',
                enabled: true,
                disableBuyButtons: false
            });
            this.settings = result;
            console.log('üìã ƒê√£ t·∫£i c√†i ƒë·∫∑t:', this.settings);
        } catch (error) {
            console.error('‚ùå L·ªói khi t·∫£i c√†i ƒë·∫∑t:', error);
        }
    }
    
    setupMessageListener() {
        chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
            console.log('üì® Nh·∫≠n tin nh·∫Øn:', request);
            
            if (request.action === 'updateSettings') {
                this.settings = request.settings;
                this.refreshAllPrices();
                this.refreshBuyButtonStatus();
                sendResponse({status: 'updated'});
            } else if (request.action === 'toggleExtension') {
                this.settings.enabled = request.enabled;
                if (request.enabled) {
                    this.refreshAllPrices();
                    this.refreshBuyButtonStatus();
                } else {
                    this.removeAllTimeDisplays();
                    this.enableAllBuyButtons();
                    this.removeAllFunnyMessages();
                }
                sendResponse({status: 'toggled'});
            }
        });
    }
    
    startProcessing() {
        if (!this.settings.enabled) {
            console.log('‚è∏Ô∏è Extension ƒë√£ t·∫Øt');
            return;
        }
        
        console.log('üîç B·∫Øt ƒë·∫ßu x·ª≠ l√Ω...');
        
        // X·ª≠ l√Ω gi√° v·ªõi nhi·ªÅu l·∫ßn th·ª≠
        this.processAllPrices();
        setTimeout(() => this.processAllPrices(), 2000);
        setTimeout(() => this.processAllPrices(), 5000);
        
        // Thi·∫øt l·∫≠p x·ª≠ l√Ω n√∫t mua h√†ng
        this.refreshBuyButtonStatus();
        setTimeout(() => this.refreshBuyButtonStatus(), 3000);
        
        // Theo d√µi thay ƒë·ªïi DOM
        this.setupObserver();
    }
    
    refreshBuyButtonStatus() {
        if (this.settings.disableBuyButtons) {
            this.disableAllBuyButtons();
        } else {
            this.enableAllBuyButtons();
            this.setupBuyButtonWarnings();
        }
    }
    
    disableAllBuyButtons() {
        console.log('üõ°Ô∏è V√¥ hi·ªáu h√≥a t·∫•t c·∫£ n√∫t mua h√†ng v√† hi·ªÉn th·ªã th√¥ng b√°o c·∫£i thi·ªán...');
        
        let disabledCount = 0;
        const buyButtonTexts = ['mua ngay', 'buy now', 'mua v·ªõi voucher', 'th√™m v√†o gi·ªè', 'add to cart'];
        const allButtons = document.querySelectorAll('button, a[role="button"], [role="button"]');
        
        allButtons.forEach(button => {
            const text = button.textContent.toLowerCase().trim();
            const isBuyButton = buyButtonTexts.some(buyText => text.includes(buyText));
            
            if (isBuyButton && !this.disabledButtons.has(button)) {
                this.disableBuyButton(button);
                this.addFunnyMessageNextToButton(button);
                this.disabledButtons.add(button);
                disabledCount++;
            }
        });
        
        console.log(`üõ°Ô∏è ƒê√£ v√¥ hi·ªáu h√≥a ${disabledCount} n√∫t mua h√†ng`);
    }
    
    addFunnyMessageNextToButton(button) {
        // Ki·ªÉm tra xem ƒë√£ c√≥ th√¥ng b√°o ch∆∞a
        if (button.parentElement?.querySelector('.vn-funny-message-side')) {
            return;
        }
        
        const messageBox = document.createElement('div');
        messageBox.className = 'vn-funny-message-side';
        messageBox.style.cssText = `
            position: absolute;
            top: 50%;
            left: calc(100% + 5px);
            transform: translateY(-50%);
            background: #dc2626;
            color: white;
            padding: 10px 16px;
            border-radius: 10px;
            font-size: 14px;
            font-weight: 700;
            white-space: nowrap;
            z-index: 1000;
            box-shadow: 0 3px 12px rgba(220, 38, 38, 0.5);
            border: 2px solid rgba(255, 255, 255, 0.3);
            max-width: 350px;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            animation: funnyMessageSlideIn 0.5s ease-out;
            pointer-events: none;
            letter-spacing: 0.3px;
            text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.3);
        `;
        
        messageBox.textContent = "X√°ch ƒëu√Ωt l√™n m√† ki·∫øm ti·ªÅn ƒëi, mua mua c√°i g√¨ üôÑ";
        
        // ƒê·∫£m b·∫£o button container c√≥ position relative
        const container = button.closest('div, section, article') || button.parentElement;
        if (container && getComputedStyle(container).position === 'static') {
            container.style.position = 'relative';
        }
        
        // Th√™m CSS animation c·∫£i thi·ªán n·∫øu ch∆∞a c√≥
        if (!document.querySelector('#vn-side-message-animations')) {
            const style = document.createElement('style');
            style.id = 'vn-side-message-animations';
            style.textContent = `
                @keyframes funnyMessageSlideIn {
                    0% { 
                        opacity: 0; 
                        transform: translateY(-50%) translateX(-15px) scale(0.9); 
                    }
                    100% { 
                        opacity: 1; 
                        transform: translateY(-50%) translateX(0) scale(1); 
                    }
                }
                @keyframes funnyMessageSlideOut {
                    0% { 
                        opacity: 1; 
                        transform: translateY(-50%) translateX(0) scale(1); 
                    }
                    100% { 
                        opacity: 0; 
                        transform: translateY(-50%) translateX(-15px) scale(0.9); 
                    }
                }
                .vn-funny-message-side:hover {
                    transform: translateY(-50%) scale(1.05) !important;
                    box-shadow: 0 5px 15px rgba(220, 38, 38, 0.7) !important;
                    background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%) !important;
                }
                
                /* Responsive positioning - g·∫ßn h∆°n v√† to h∆°n */
                @media (max-width: 768px) {
                    .vn-funny-message-side {
                        position: fixed !important;
                        top: 15px !important;
                        left: 50% !important;
                        transform: translateX(-50%) !important;
                        max-width: 95vw !important;
                        font-size: 13px !important;
                        padding: 8px 14px !important;
                        z-index: 999999 !important;
                        border-radius: 8px !important;
                    }
                }
                
                /* Animation cho mobile */
                @media (max-width: 768px) {
                    @keyframes funnyMessageSlideIn {
                        0% { 
                            opacity: 0; 
                            transform: translateX(-50%) translateY(-20px) scale(0.9); 
                        }
                        100% { 
                            opacity: 1; 
                            transform: translateX(-50%) translateY(0) scale(1); 
                        }
                    }
                }
            `;
            document.head.appendChild(style);
        }
        
        // Th√™m v√†o container thay v√¨ button
        try {
            container.appendChild(messageBox);
            
            // ƒêi·ªÅu ch·ªânh v·ªã tr√≠ n·∫øu b·ªã tr√†n m√†n h√¨nh
            setTimeout(() => {
                const rect = messageBox.getBoundingClientRect();
                const viewportWidth = window.innerWidth;
                
                if (rect.right > viewportWidth - 10) {
                    // Hi·ªÉn th·ªã b√™n tr√°i n·∫øu b·ªã tr√†n - g·∫ßn h∆°n
                    messageBox.style.left = 'auto';
                    messageBox.style.right = 'calc(100% + 5px)';
                }
                
                // Tr√™n mobile, hi·ªÉn th·ªã fixed position
                if (window.innerWidth <= 768) {
                    messageBox.style.position = 'fixed';
                    messageBox.style.top = '15px';
                    messageBox.style.left = '50%';
                    messageBox.style.transform = 'translateX(-50%)';
                    messageBox.style.zIndex = '999999';
                }
            }, 100);
            
        } catch (error) {
            console.warn('‚ùå Kh√¥ng th·ªÉ th√™m th√¥ng b√°o b√™n c·∫°nh n√∫t:', error);
        }
    }
    
    removeAllFunnyMessages() {
        const funnyMessages = document.querySelectorAll('.vn-funny-message-side');
        funnyMessages.forEach(message => {
            message.style.animation = 'funnyMessageSlideOut 0.3s ease-out';
            setTimeout(() => message.remove(), 300);
        });
        console.log(`üóëÔ∏è ƒê√£ x√≥a ${funnyMessages.length} th√¥ng b√°o h√†i h∆∞·ªõc`);
    }
    
    disableBuyButton(button) {
        if (!button.dataset.vnOriginalDisabled) {
            button.dataset.vnOriginalDisabled = button.disabled || 'false';
            button.dataset.vnOriginalStyle = button.style.cssText || '';
            button.dataset.vnOriginalTitle = button.title || '';
        }
        
        button.disabled = true;
        button.style.opacity = '0.4';
        button.style.cursor = 'not-allowed';
        button.style.pointerEvents = 'none';
        button.style.filter = 'grayscale(100%)';
        button.title = "üõ°Ô∏è X√°ch ƒëu√Ωt l√™n m√† ki·∫øm ti·ªÅn ƒëi, mua mua c√°i g√¨ üôÑ";
        button.classList.add('vn-disabled-button');
        
        const clickHandler = (e) => {
            e.preventDefault();
            e.stopPropagation();
            e.stopImmediatePropagation();
            this.showFunnyDisabledMessage();
            return false;
        };
        
        button.addEventListener('click', clickHandler, { capture: true });
    }
    
    showFunnyDisabledMessage() {
        const message = "X√°ch ƒëu√Ωt l√™n m√† ki·∫øm ti·ªÅn ƒëi, mua mua c√°i g√¨ üôÑ";
        alert(`üõ°Ô∏è B·∫¢O V·ªÜ T√ÄI CH√çNH\n\n${message}`);
    }
    
    enableAllBuyButtons() {
        console.log('üîì B·∫≠t l·∫°i t·∫•t c·∫£ n√∫t mua h√†ng v√† reset c·∫£nh b√°o...');
        
        const disabledButtons = document.querySelectorAll('.vn-disabled-button');
        disabledButtons.forEach(button => {
            this.enableBuyButton(button);
        });
        
        this.removeAllFunnyMessages();
        this.disabledButtons = new WeakSet();
        
        // Reset tr·∫°ng th√°i c·∫£nh b√°o khi enable l·∫°i
        this.confirmedButtons = new WeakSet();
        this.processedButtons = new WeakSet();
        
        console.log(`üîì ƒê√£ b·∫≠t l·∫°i ${disabledButtons.length} n√∫t mua h√†ng v√† reset c·∫£nh b√°o`);
    }
    
    enableBuyButton(button) {
        if (button.dataset.vnOriginalDisabled !== undefined) {
            button.disabled = button.dataset.vnOriginalDisabled === 'true';
            button.style.cssText = button.dataset.vnOriginalStyle || '';
            button.title = button.dataset.vnOriginalTitle || '';
            
            delete button.dataset.vnOriginalDisabled;
            delete button.dataset.vnOriginalStyle;
            delete button.dataset.vnOriginalTitle;
        }
        
        button.classList.remove('vn-disabled-button');
    }
    
    setupObserver() {
        if (this.observer) {
            this.observer.disconnect();
        }
        
        this.observer = new MutationObserver((mutations) => {
            if (!this.settings.enabled) return;
            
            clearTimeout(this.debounceTimer);
            this.debounceTimer = setTimeout(() => {
                this.processAllPrices();
                this.refreshBuyButtonStatus();
            }, 1500);
        });
        
        this.observer.observe(document.body, {
            childList: true,
            subtree: true
        });
        
        console.log('üëÄ ƒê√£ thi·∫øt l·∫≠p observer');
    }
    
    setupBuyButtonWarnings() {
        if (this.settings.disableBuyButtons) return;
        
        console.log('üõí Thi·∫øt l·∫≠p c·∫£nh b√°o 1 l·∫ßn cho n√∫t mua h√†ng...');
        
        const buyButtonTexts = ['mua ngay', 'buy now', 'mua v·ªõi voucher', 'th√™m v√†o gi·ªè', 'add to cart'];
        const allButtons = document.querySelectorAll('button, a[role="button"], [role="button"]');
        
        allButtons.forEach(button => {
            const text = button.textContent.toLowerCase().trim();
            const isBuyButton = buyButtonTexts.some(buyText => text.includes(buyText));
            
            if (isBuyButton && !this.processedButtons.has(button) && !button.classList.contains('vn-disabled-button')) {
                this.addBuyButtonWarning(button);
                this.processedButtons.add(button);
            }
        });
    }
    
    addBuyButtonWarning(button) {
        console.log('üîî Th√™m c·∫£nh b√°o 1 l·∫ßn cho n√∫t:', button.textContent?.trim());
        
        const originalHandler = async (event) => {
            // Ki·ªÉm tra xem n√∫t n√†y ƒë√£ ƒë∆∞·ª£c confirm ch∆∞a
            if (this.confirmedButtons.has(button)) {
                console.log('‚úÖ N√∫t ƒë√£ ƒë∆∞·ª£c confirm tr∆∞·ªõc ƒë√≥, cho ph√©p ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng');
                return true; // Cho ph√©p ti·∫øp t·ª•c m√† kh√¥ng c·∫£nh b√°o
            }
            
            console.log('üõí N√∫t mua h√†ng ƒë∆∞·ª£c nh·∫•n l·∫ßn ƒë·∫ßu, ki·ªÉm tra c·∫£nh b√°o...');
            
            const price = this.findNearestPrice(button);
            console.log('üí∞ Gi√° t√¨m th·∫•y:', price);
            
            if (price && price > 1000) {
                const dailyRate = this.calculateDailyRate();
                const daysNeeded = price / dailyRate;
                
                console.log('üìä S·ªë ng√†y c·∫ßn l√†m vi·ªác:', daysNeeded);
                
                if (daysNeeded >= 0.3) { // Threshold cho mindful buying
                    // NgƒÉn ch·∫∑n action m·∫∑c ƒë·ªãnh ƒë·ªÉ hi·ªÉn th·ªã c·∫£nh b√°o
                    event.preventDefault();
                    event.stopPropagation();
                    event.stopImmediatePropagation();
                    
                    const reminderData = this.getReminderData(daysNeeded);
                    const shouldContinue = await this.showBuyWarning(price, daysNeeded, reminderData);
                    
                    if (shouldContinue) {
                        console.log('‚úÖ Ng∆∞·ªùi d√πng ch·ªçn ti·∫øp t·ª•c mua, ƒë√°nh d·∫•u n√∫t ƒë√£ confirm');
                        // ƒê√°nh d·∫•u n√∫t n√†y ƒë√£ ƒë∆∞·ª£c confirm
                        this.confirmedButtons.add(button);
                        
                        // Th·ª±c hi·ªán l·∫°i click sau khi confirm
                        setTimeout(() => {
                            console.log('üîÑ Th·ª±c hi·ªán l·∫°i click sau khi confirm...');
                            button.click();
                        }, 100);
                    } else {
                        console.log('‚ùå Ng∆∞·ªùi d√πng ch·ªçn kh√¥ng mua, h·ªßy b·ªè action');
                    }
                    
                    return false;
                }
            }
            
            return true;
        };
        
        button.addEventListener('click', originalHandler, true);
        button.setAttribute('data-vn-warning-added', 'true');
    }
    
    showBuyWarning(price, daysNeeded, reminderData) {
        return new Promise((resolve) => {
            const timeWorked = this.formatTimeDisplay(daysNeeded * this.timeConstants.hoursPerDay);
            const formattedPrice = new Intl.NumberFormat('vi-VN', {
                style: 'currency',
                currency: 'VND'
            }).format(price);
            
            let message = `${reminderData.emoji} MUA S·∫ÆM C√ì √ù TH·ª®C\n\n`;
            message += `üí∞ Gi√° s·∫£n ph·∫©m: ${formattedPrice}\n`;
            message += `‚è∞ Th·ªùi gian l√†m vi·ªác: ${timeWorked}\n`;
            message += `üìä M·ª©c ƒë·ªô: ${reminderData.levelName}\n\n`;
            
            if (reminderData.reminder) {
                message += `üß† ${reminderData.reminder}\n\n`;
            }
            
            message += `ü§î H√£y d√†nh v√†i gi√¢y t·ª± h·ªèi:\n`;
            message += `‚Ä¢ T√¥i c√≥ th·ª±c s·ª± c·∫ßn m√≥n n√†y kh√¥ng?\n`;
            message += `‚Ä¢ C√≥ l·ª±a ch·ªçn n√†o t·ªët h∆°n kh√¥ng?\n`;
            message += `‚Ä¢ M√≥n n√†y c√≥ ƒë√°ng s·ªë th·ªùi gian l√†m vi·ªác n√†y?\n\n`;
            message += `‚ùì B·∫°n c√≥ mu·ªën ti·∫øp t·ª•c mua kh√¥ng?\n`;
            message += `(L∆∞u √Ω: N·∫øu ch·ªçn "OK", l·∫ßn sau b·∫•m n√∫t n√†y s·∫Ω kh√¥ng c√≥ c·∫£nh b√°o n·ªØa)`;
            
            const result = confirm(message);
            console.log('ü§î Quy·∫øt ƒë·ªãnh mindful buying:', result ? 'Ti·∫øp t·ª•c mua (1 l·∫ßn)' : 'H·ªßy b·ªè');
            
            if (result) {
                console.log('üíö Ng∆∞·ªùi d√πng ƒë√£ c√¢n nh·∫Øc v√† quy·∫øt ƒë·ªãnh mua. N√∫t s·∫Ω ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng t·ª´ gi·ªù.');
            } else {
                console.log('üíö Mindful buying th√†nh c√¥ng! ƒê√£ ngƒÉn ch·∫∑n m·ªôt l·∫ßn mua s·∫Øm b·ªëc ƒë·ªìng.');
            }
            
            resolve(result);
        });
    }
    
    findNearestPrice(button) {
        const containers = [
            button.closest('[class*="product"]'),
            button.closest('[class*="item"]'),
            button.closest('div'),
            button.parentElement,
            document
        ].filter(Boolean);
        
        for (const container of containers) {
            const timeDisplay = container.querySelector('.vn-price-time-container');
            if (timeDisplay && timeDisplay.dataset.price) {
                return parseFloat(timeDisplay.dataset.price);
            }
            
            const configs = this.getSiteConfigs();
            for (const config of configs) {
                const priceElement = container.querySelector(config.currentPriceSelector);
                if (priceElement) {
                    const price = this.extractPrice(priceElement.textContent, config);
                    if (price && price > 1000) {
                        return price;
                    }
                }
            }
        }
        
        return null;
    }
    
    calculateDailyRate() {
        let dailyRate = this.settings.salary;
        
        switch (this.settings.salaryUnit) {
            case 'year':
                dailyRate = this.settings.salary / this.timeConstants.daysPerYear;
                break;
            case 'month':
                dailyRate = this.settings.salary / this.timeConstants.daysPerMonth;
                break;
            case 'hour':
                dailyRate = this.settings.salary * this.timeConstants.hoursPerDay;
                break;
            case 'day':
            default:
                dailyRate = this.settings.salary;
                break;
        }
        
        if (this.settings.taxType === 'before') {
            dailyRate = dailyRate * 0.85;
        }
        
        return dailyRate;
    }
    
    calculateHourlyRate() {
        let hourlyRate = this.settings.salary;
        
        switch (this.settings.salaryUnit) {
            case 'year':
                hourlyRate = this.settings.salary / this.timeConstants.hoursPerYear;
                break;
            case 'month':
                hourlyRate = this.settings.salary / this.timeConstants.hoursPerMonth;
                break;
            case 'day':
                hourlyRate = this.settings.salary / this.timeConstants.hoursPerDay;
                break;
            case 'hour':
                hourlyRate = this.settings.salary;
                break;
        }
        
        if (this.settings.taxType === 'before') {
            hourlyRate = hourlyRate * 0.85;
        }
        
        return hourlyRate;
    }
    
    getReminderData(daysNeeded) {
        for (const [level, data] of Object.entries(this.reminderLevels)) {
            const [min, max] = data.range;
            if (daysNeeded >= min && daysNeeded <= max) {
                const randomEmoji = data.emoji[Math.floor(Math.random() * data.emoji.length)];
                const randomReminder = data.reminders.length > 0 ? 
                    data.reminders[Math.floor(Math.random() * data.reminders.length)] : null;
                
                return {
                    level: parseInt(level),
                    levelName: data.level,
                    emoji: randomEmoji,
                    reminder: randomReminder,
                    color: data.color,
                    tooltipBg: data.tooltipBg
                };
            }
        }
        
        return {
            level: 1,
            levelName: 'An to√†n',
            emoji: 'üíö',
            reminder: null,
            color: '#10b981',
            tooltipBg: 'linear-gradient(135deg, #10b981 0%, #059669 100%)'
        };
    }
    
    getSiteConfigs() {
        const hostname = window.location.hostname.toLowerCase();
        
        if (hostname.includes('shopee.vn')) {
            return [{
                name: 'Shopee',
                currentPriceSelector: '.IZPeQz:not(.ZA5sW5)',
                excludeSelectors: ['.ZA5sW5'],
                priceRegex: /‚Ç´([\d.,\s]+)/
            }];
        }
        
        if (hostname.includes('lazada.vn')) {
            return [{
                name: 'Lazada',
                currentPriceSelector: '.pdp-price_color_orange',
                excludeSelectors: ['.pdp-price_type_deleted'],
                priceRegex: /‚Ç´\s*([\d.,\s]+)/
            }];
        }
        
        return [{
            name: 'Generic',
            currentPriceSelector: '[class*="price"]:not([class*="old"])',
            excludeSelectors: ['.price.old', '[class*="old"]'],
            priceRegex: /‚Ç´?\s*([\d.,\s]+)/
        }];
    }
    
    processAllPrices() {
        let processedCount = 0;
        const configs = this.getSiteConfigs();
        
        configs.forEach(config => {
            try {
                const elements = document.querySelectorAll(config.currentPriceSelector);
                
                elements.forEach(element => {
                    if (this.processPriceElement(element, config)) {
                        processedCount++;
                    }
                });
            } catch (error) {
                console.warn(`‚ö†Ô∏è L·ªói v·ªõi config "${config.name}":`, error);
            }
        });
        
        if (processedCount > 0) {
            console.log(`üí∞ ƒê√£ x·ª≠ l√Ω ${processedCount} gi√° v·ªõi c√¥ng th·ª©c th·ªùi gian c·∫£i thi·ªán`);
        }
    }
    
    processPriceElement(element, config) {
        if (this.processedElements.has(element)) return false;
        if (this.hasTimeDisplay(element)) return false;
        if (this.isExcludedElement(element, config)) return false;
        
        const priceText = element.textContent;
        const price = this.extractPrice(priceText, config);
        
        if (price && price > 1000) {
            this.processedElements.add(element);
            this.addTimeDisplay(element, price);
            return true;
        }
        
        return false;
    }
    
    hasTimeDisplay(element) {
        return element.nextElementSibling?.classList.contains('vn-price-time-container') ||
               element.parentElement?.querySelector('.vn-price-time-container');
    }
    
    isExcludedElement(element, config) {
        const className = element.className || '';
        
        for (const excludeSelector of config.excludeSelectors) {
            try {
                if (element.matches(excludeSelector)) {
                    return true;
                }
            } catch (e) {
                // Ignore selector errors
            }
        }
        
        const style = window.getComputedStyle(element);
        if (style.textDecoration.includes('line-through')) {
            return true;
        }
        
        const oldPriceIndicators = ['old', 'before', 'strike', 'deleted'];
        for (const indicator of oldPriceIndicators) {
            if (className.toLowerCase().includes(indicator)) {
                return true;
            }
        }
        
        return false;
    }
    
    extractPrice(text, config) {
        if (!text || typeof text !== 'string') return null;
        
        let match;
        if (config.priceRegex) {
            match = text.match(config.priceRegex);
            if (match && match[1]) {
                text = match[1];
            }
        }
        
        const cleanText = text.replace(/[^\d.,\s]/g, '');
        if (!cleanText) return null;
        
        let price = cleanText.replace(/\s/g, '');
        
        if (price.includes(',') && price.includes('.')) {
            const lastComma = price.lastIndexOf(',');
            const lastDot = price.lastIndexOf('.');
            
            if (lastComma > lastDot) {
                price = price.replace(/\./g, '').replace(',', '.');
            } else {
                price = price.replace(/,/g, '');
            }
        } else if (price.includes(',')) {
            const parts = price.split(',');
            if (parts.length === 2 && parts[1].length <= 2) {
                price = price.replace(',', '.');
            } else {
                price = price.replace(/,/g, '');
            }
        } else if (price.includes('.')) {
            const parts = price.split('.');
            if (parts.length > 2 || (parts.length === 2 && parts[1].length > 2)) {
                price = price.replace(/\./g, '');
            }
        }
        
        const numPrice = parseFloat(price);
        return (numPrice >= 1000 && numPrice <= 1000000000) ? numPrice : null;
    }
    
    addTimeDisplay(element, price) {
        const dailyRate = this.calculateDailyRate();
        const daysNeeded = price / dailyRate;
        
        const hourlyRate = this.calculateHourlyRate();
        const hoursNeeded = price / hourlyRate;
        
        const timeWorked = this.formatTimeDisplay(hoursNeeded);
        const reminderData = this.getReminderData(daysNeeded);
        
        const timeDisplay = this.createTimeDisplay(timeWorked, reminderData, price);
        
        try {
            element.parentElement.insertBefore(timeDisplay, element.nextSibling);
            console.log('‚úÖ ƒê√£ th√™m time display:', timeWorked, 'cho gi√°:', price.toLocaleString('vi-VN'), 'VNƒê');
        } catch (error) {
            console.warn('‚ùå L·ªói khi th√™m time display:', error);
        }
    }
    
    formatTimeDisplay(hoursNeeded) {
        const displayUnit = this.settings.displayUnit;
        
        if (displayUnit === 'hours') {
            if (hoursNeeded < 1) {
                return `${Math.round(hoursNeeded * 60)}p`;
            }
            const hours = Math.round(hoursNeeded * 10) / 10;
            return `${hours}h`;
        }
        
        if (displayUnit === 'days') {
            const days = Math.round((hoursNeeded / this.timeConstants.hoursPerDay) * 10) / 10;
            return `${days} ng√†y`;
        }
        
        if (displayUnit === 'months') {
            const months = Math.round((hoursNeeded / this.timeConstants.hoursPerMonth) * 10) / 10;
            return `${months} th√°ng`;
        }
        
        if (displayUnit === 'years') {
            const years = Math.round((hoursNeeded / this.timeConstants.hoursPerYear) * 100) / 100;
            return `${years} nƒÉm`;
        }
        
        // Auto mode - s·ª≠ d·ª•ng h·∫±ng s·ªë th·ªùi gian c·∫£i thi·ªán
        if (hoursNeeded < 1) {
            return `${Math.round(hoursNeeded * 60)}p`;
        } else if (hoursNeeded < this.timeConstants.hoursPerDay) {
            const hours = Math.floor(hoursNeeded);
            const minutes = Math.round((hoursNeeded - hours) * 60);
            return minutes > 0 ? `${hours}h${minutes}p` : `${hours}h`;
        } else if (hoursNeeded < this.timeConstants.hoursPerMonth) {
            const days = Math.floor(hoursNeeded / this.timeConstants.hoursPerDay);
            const remainingHours = Math.round(hoursNeeded % this.timeConstants.hoursPerDay);
            return remainingHours > 0 ? `${days}d${remainingHours}h` : `${days}d`;
        } else if (hoursNeeded < this.timeConstants.hoursPerYear) {
            const months = Math.floor(hoursNeeded / this.timeConstants.hoursPerMonth);
            const remainingDays = Math.round((hoursNeeded % this.timeConstants.hoursPerMonth) / this.timeConstants.hoursPerDay);
            return remainingDays > 0 ? `${months}th${remainingDays}d` : `${months}th`;
        } else {
            const years = Math.floor(hoursNeeded / this.timeConstants.hoursPerYear);
            const remainingMonths = Math.round((hoursNeeded % this.timeConstants.hoursPerYear) / this.timeConstants.hoursPerMonth);
            return remainingMonths > 0 ? `${years}y${remainingMonths}th` : `${years}y`;
        }
    }
    
    createTimeDisplay(timeWorked, reminderData, price) {
        const container = document.createElement('div');
        container.className = 'vn-price-time-container';
        container.dataset.price = price;
        
        const timeDisplay = document.createElement('div');
        timeDisplay.className = `vn-price-time vn-level-${reminderData.level}`;
        timeDisplay.innerHTML = `
            <span class="vn-emoji">${reminderData.emoji}</span>
            <span class="vn-time">‚è∞ ${timeWorked}</span>
        `;
        
        // Th√™m tooltip v·ªõi m√†u s·∫Øc theo level
        if (reminderData.reminder) {
            const tooltip = document.createElement('div');
            tooltip.className = 'vn-tooltip';
            tooltip.style.background = reminderData.tooltipBg;
            tooltip.style.borderColor = `${reminderData.color}44`; // 44 = 27% opacity
            tooltip.innerHTML = `
                <div style="font-weight: 700; margin-bottom: 8px; color: #ffffff;">
                    ${reminderData.emoji} ${reminderData.levelName.toUpperCase()}
                </div>
                <div style="margin-bottom: 8px; color: #f8fafc;">
                    <strong>üí∞ Gi√°:</strong> ${price.toLocaleString('vi-VN')}‚Ç´<br>
                    <strong>‚è∞ Th·ªùi gian:</strong> ${timeWorked}
                </div>
                <div style="font-size: 13px; line-height: 1.5; color: #e2e8f0;">
                    ${reminderData.reminder}
                </div>
            `;
            container.appendChild(tooltip);
        }
        
        container.appendChild(timeDisplay);
        
        // Event listeners cho tooltip
        if (reminderData.reminder) {
            let hoverTimeout;
            
            timeDisplay.addEventListener('mouseenter', () => {
                clearTimeout(hoverTimeout);
                const tooltip = container.querySelector('.vn-tooltip');
                if (tooltip) {
                    const rect = timeDisplay.getBoundingClientRect();
                    const left = rect.right + 30;
                    const top = rect.top - 20;
                    
                    tooltip.style.left = left + 'px';
                    tooltip.style.top = top + 'px';
                    tooltip.classList.add('show');
                }
            });
            
            timeDisplay.addEventListener('mouseleave', () => {
                hoverTimeout = setTimeout(() => {
                    const tooltip = container.querySelector('.vn-tooltip');
                    if (tooltip) {
                        tooltip.classList.remove('show');
                    }
                }, 300);
            });
        }
        
        return container;
    }
    
    refreshAllPrices() {
        console.log('üîÑ L√†m m·ªõi t·∫•t c·∫£ gi√° v·ªõi c√¥ng th·ª©c th·ªùi gian c·∫£i thi·ªán...');
        this.removeAllTimeDisplays();
        this.processedElements = new WeakSet();
        setTimeout(() => this.processAllPrices(), 500);
    }
    
    removeAllTimeDisplays() {
        const timeDisplays = document.querySelectorAll('.vn-price-time-container');
        timeDisplays.forEach(display => display.remove());
        console.log(`üóëÔ∏è ƒê√£ x√≥a ${timeDisplays.length} time displays`);
    }
}

// Kh·ªüi ƒë·ªông extension
console.log('üîå Vietnamese Shopping Helper v1.6.2 - Content Script loading v·ªõi c·∫£nh b√°o 1 l·∫ßn...');

if (!window.vnShoppingHelperInitialized) {
    window.vnShoppingHelperInitialized = true;
    
    try {
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', () => {
                new VietnameseShoppingHelper();
            });
        } else {
            new VietnameseShoppingHelper();
        }
    } catch (error) {
        console.error('‚ùå L·ªói kh·ªüi ƒë·ªông Vietnamese Shopping Helper:', error);
    }
}