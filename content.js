class VietnameseShoppingHelper {
    constructor() {
        this.settings = {
            salary: 8000000,
            salaryUnit: 'month',
            taxType: 'after',
            displayUnit: 'auto',
            enabled: true,
            disableBuyButtons: false
        };
        
        this.processedElements = new WeakSet();
        this.processedButtons = new WeakSet();
        this.disabledButtons = new WeakSet();
        this.observer = null;
        this.isInitialized = false;
        this.debounceTimer = null;
        
        // H·ªá th·ªëng ph√¢n c·∫•p d·ª±a tr√™n th·ªùi gian l√†m vi·ªác (ng√†y) - Mindful Buying
        this.reminderLevels = {
            1: {
                range: [0, 1], // < 1 ng√†y
                emoji: ['üíö', '‚úÖ', 'üòä'],
                level: 'An to√†n',
                color: '#10b981',
                reminders: [
                    "ƒê√¢y l√† kho·∫£n chi ti√™u h·ª£p l√Ω. B·∫°n c√≥ th·ª±c s·ª± c·∫ßn v√† s·∫Ω s·ª≠ d·ª•ng n√≥ kh√¥ng?",
                    "M√≥n n√†y c√≥ th·ª±c s·ª± mang l·∫°i gi√° tr·ªã cho cu·ªôc s·ªëng c·ªßa b·∫°n?",
                    "B·∫°n ƒë√£ so s√°nh gi√° ·ªü nh·ªØng n∆°i kh√°c ch∆∞a?",
                    "Li·ªáu b·∫°n c√≥ th·ªÉ ƒë·ª£i ƒë·∫øn khi c√≥ khuy·∫øn m√£i t·ªët h∆°n?"
                ]
            },
            2: {
                range: [1, 3], // 1-3 ng√†y
                emoji: ['üü°', '‚ö†Ô∏è', 'ü§î'],
                level: 'C·∫©n th·∫≠n',
                color: '#f59e0b',
                reminders: [
                    "ƒê√¢y l√† 1-3 ng√†y l√†m vi·ªác. Li·ªáu b·∫°n c√≥ th·ªÉ ƒë·ª£i th√™m ƒë·ªÉ t√¨m gi√° t·ªët h∆°n?",
                    "H√£y t·ª± h·ªèi: 'T√¥i s·∫Ω c·∫£m th·∫•y th·∫ø n√†o n·∫øu kh√¥ng mua m√≥n n√†y?'",
                    "C√≥ ph·∫£i b·∫°n ƒëang mua v√¨ c·∫ßn thi·∫øt hay ch·ªâ v√¨ mu·ªën?",
                    "B·∫°n c√≥ th·ªÉ th·ª≠ quy t·∫Øc 24 gi·ªù - ƒë·ª£i 1 ng√†y r·ªìi quy·∫øt ƒë·ªãnh?",
                    "N·∫øu l∆∞∆°ng c·ªßa b·∫°n gi·∫£m xu·ªëng c√≤n m·ªôt n·ª≠a, b·∫°n c√≥ v·∫´n mua kh√¥ng?",
                    "M√≥n n√†y c√≥ gi·∫£i quy·∫øt ƒë∆∞·ª£c v·∫•n ƒë·ªÅ th·ª±c t·∫ø n√†o c·ªßa b·∫°n?"
                ]
            },
            3: {
                range: [3, 7], // 3-7 ng√†y (1 tu·∫ßn)
                emoji: ['üî∂', 'üò∞', '‚ö°'],
                level: 'C·∫£nh b√°o',
                color: '#f97316',
                reminders: [
                    "ƒê√¢y l√† c·∫£ tu·∫ßn l√†m vi·ªác! B·∫°n c√≥ ch·∫Øc ƒë√¢y l√† ∆∞u ti√™n h√†ng ƒë·∫ßu?",
                    "Th·ª≠ nghƒ© xem: 'Sau 1 nƒÉm, t√¥i c√≥ nh·ªõ ƒë·∫øn vi·ªác mua m√≥n n√†y kh√¥ng?'",
                    "C√≥ nh·ªØng m·ª•c ti√™u t√†i ch√≠nh n√†o quan tr·ªçng h∆°n ƒëang ch·ªù ƒë·ª£i?",
                    "B·∫°n c√≥ th·ªÉ l√†m g√¨ kh√°c v·ªõi s·ªë ti·ªÅn n√†y ƒë·ªÉ ƒë·∫ßu t∆∞ cho t∆∞∆°ng lai?",
                    "H√£y li·ªát k√™ 3 l√Ω do th·ª±c s·ª± c·∫ßn mua v√† 3 l√Ω do kh√¥ng n√™n mua.",
                    "B·∫°n c√≥ th·ªÉ thu√™, m∆∞·ª£n ho·∫∑c t√¨m thay th·∫ø r·∫ª h∆°n kh√¥ng?",
                    "S·ªë ti·ªÅn n√†y c√≥ th·ªÉ gi√∫p b·∫°n h·ªçc m·ªôt k·ªπ nƒÉng m·ªõi thay v√¨ mua ƒë·ªì?"
                ]
            },
            4: {
                range: [7, 30], // 1 tu·∫ßn - 1 th√°ng
                emoji: ['üî¥', 'üò±', 'üö®'],
                level: 'Nguy hi·ªÉm',
                color: '#ef4444',
                reminders: [
                    "ƒê√¢y l√† t·ª´ 1 tu·∫ßn ƒë·∫øn 1 th√°ng l∆∞∆°ng! B·∫°n c√≥ emergency fund ch∆∞a?",
                    "Li·ªáu m√≥n n√†y c√≥ thay ƒë·ªïi cƒÉn b·∫£n ch·∫•t l∆∞·ª£ng cu·ªôc s·ªëng c·ªßa b·∫°n?",
                    "H√£y ng·ªß m·ªôt ƒë√™m v√† tham kh·∫£o √Ω ki·∫øn ng∆∞·ªùi th√¢n tr∆∞·ªõc khi quy·∫øt ƒë·ªãnh.",
                    "N·∫øu b·∫°n m·∫•t vi·ªác ng√†y mai, m√≥n n√†y c√≥ gi√∫p b·∫°n t√¨m vi·ªác m·ªõi kh√¥ng?",
                    "C√≥ th·ªÉ thu√™, m∆∞·ª£n, ho·∫∑c mua c≈© thay v√¨ mua m·ªõi kh√¥ng?",
                    "B·∫°n ƒë√£ t√≠nh to√°n t·ªïng chi ph√≠ s·ªü h·ªØu (b·∫£o tr√¨, b·∫£o hi·ªÉm, l∆∞u tr·ªØ)?",
                    "M√≥n n√†y c√≥ th·ª±c s·ª± tƒÉng thu nh·∫≠p ho·∫∑c ti·∫øt ki·ªám chi ph√≠ trong t∆∞∆°ng lai?",
                    "B·∫°n c√≥ s·∫µn s√†ng l√†m th√™m gi·ªù ƒë·ªÉ b√π l·∫°i s·ªë ti·ªÅn n√†y kh√¥ng?"
                ]
            },
            5: {
                range: [30, Infinity], // > 1 th√°ng
                emoji: ['üí•', 'üö®', '‚õî', 'üõë'],
                level: 'R·∫•t nguy hi·ªÉm',
                color: '#dc2626',
                reminders: [
                    "C·∫¢NH B√ÅO: ƒê√¢y l√† h∆°n 1 th√°ng l∆∞∆°ng! B·∫°n c√≥ k·∫ø ho·∫°ch t√†i ch√≠nh d√†i h·∫°n kh√¥ng?",
                    "M√≥n n√†y c√≥ th·ª±c s·ª± c·∫ßn thi·∫øt cho s·ª± nghi·ªáp hay cu·ªôc s·ªëng c·ªßa b·∫°n?",
                    "B·∫°n ƒë√£ t√≠nh to√°n t√°c ƒë·ªông ƒë·∫øn m·ª•c ti√™u ti·∫øt ki·ªám v√† ƒë·∫ßu t∆∞ ch∆∞a?",
                    "C√≥ nh·ªØng c√°ch n√†o kh√°c ƒë·ªÉ ƒë·∫°t ƒë∆∞·ª£c m·ª•c ƒë√≠ch m√† kh√¥ng c·∫ßn chi s·ªë ti·ªÅn n√†y?",
                    "H√£y vi·∫øt ra k·∫ø ho·∫°ch chi ti·∫øt t·∫°i sao m√≥n n√†y x·ª©ng ƒë√°ng v·ªõi h∆°n 1 th√°ng l∆∞∆°ng.",
                    "B·∫°n c√≥ s·∫µn s√†ng l√†m th√™m gi·ªù 1 th√°ng ƒë·ªÉ c√≥ ti·ªÅn mua m√≥n n√†y kh√¥ng?",
                    "N·∫øu b·∫°n ƒë·∫ßu t∆∞ s·ªë ti·ªÅn n√†y, sau 10 nƒÉm n√≥ s·∫Ω tr·ªü th√†nh bao nhi·ªÅu?",
                    "ƒê√¢y c√≥ ph·∫£i l√† quy·∫øt ƒë·ªãnh m√† b·∫°n s·∫Ω t·ª± h√†o sau 5 nƒÉm n·ªØa?",
                    "B·∫°n ƒë√£ c√¢n nh·∫Øc t·∫•t c·∫£ c√°c l·ª±a ch·ªçn thay th·∫ø ch∆∞a?"
                ]
            }
        };
        
        // Updated selectors based on actual website code
        this.buyButtonSelectors = [
            // Shopee - Updated based on actual code
            'button.btn.btn-solid-primary',
            'button.btn.btn-tinted',
            'button[aria-disabled="false"]:contains("Mua")',
            'button[aria-disabled="false"]:contains("voucher")',
            'button[aria-disabled="false"]:contains("gi·ªè h√†ng")',
            'button[aria-disabled="false"]:contains("Add to cart")',
            'button.YuENex.eFAm_w',
            'button.YuENex.a_JvBi',
            
            // Generic patterns cho "Mua ngay"
            'button:contains("Mua ngay")',
            'button:contains("Buy now")',
            'button:contains("MUA NGAY")',
            'button:contains("BUY NOW")',
            'button:contains("Mua v·ªõi voucher")',
            'a:contains("Mua ngay")',
            'a:contains("Buy now")',
            '[role="button"]:contains("Mua ngay")',
            '[role="button"]:contains("Buy now")',
            
            // Generic patterns cho "Th√™m v√†o gi·ªè"
            'button:contains("Th√™m v√†o gi·ªè")',
            'button:contains("Add to cart")',
            'button:contains("TH√äM V√ÄO GI·ªé")',
            'button:contains("ADD TO CART")',
            'button:contains("th√™m v√†o gi·ªè h√†ng")',
            'a:contains("Th√™m v√†o gi·ªè")',
            'a:contains("Add to cart")',
            '[role="button"]:contains("Th√™m v√†o gi·ªè")',
            '[role="button"]:contains("Add to cart")',
            
            // Lazada
            '.add-to-cart-buy-now-btn',
            '.buyNow',
            '.pdp-mod-product-info-section .next-btn-primary',
            'button[class*="add-to-cart"]',
            'button[class*="cart"]',
            
            // TGDD/DMX
            '.btn-buy-now',
            '.btnbuy',
            '.btn-red',
            'a[class*="btn"][class*="red"]',
            '.btn-add-cart',
            'button[class*="btn-buy"]',
            
            // Tiki
            'button[data-view-id*="buy_now"]',
            '.btn-buy',
            'button[class*="btn-large"]',
            'button[class*="add_to_cart"]',
            'button[class*="btn-primary"]',
            
            // Sendo
            '.btn-buy-now',
            'button[class*="buy-now"]',
            'button[class*="add-cart"]',
            'button[class*="primary"]',
            
            // FPT Shop
            'button[class*="primary"]',
            'button[class*="buy"]',
            'button[class*="cart"]',
            'button[class*="btn-orange"]',
            
            // Cellphones
            'button[class*="btn-primary"]',
            'button[class*="order"]',
            'button[class*="cart"]',
            'button[class*="buy-now"]',
            
            // Hasaki
            'button[class*="add-cart"]',
            'button[class*="buy-now"]',
            'button[class*="btn-primary"]',
            
            // Hoang Ha Mobile
            'button[class*="btn-buy"]',
            'a[class*="btn-buy"]',
            'button[class*="add-cart"]',
            
            // More generic
            'button[class*="primary"]:not([class*="filter"]):not([class*="search"])',
            'button[class*="buy"]:not([class*="guide"])',
            'button[class*="purchase"]',
            'button[class*="cart"]:not([class*="view"])',
            'a[class*="buy-now"]',
            'a[class*="purchase"]',
            'a[class*="cart"]:not([class*="view"])'
        ];
        
        this.init();
    }
    
    async init() {
        console.log('üöÄ Vietnamese Shopping Helper v1.3.1 - Kh·ªüi ƒë·ªông...');
        
        try {
            await this.loadSettings();
            this.setupMessageListener();
            
            if (document.readyState === 'loading') {
                document.addEventListener('DOMContentLoaded', () => this.startProcessing());
            } else {
                this.startProcessing();
            }
            
            this.isInitialized = true;
            console.log('‚úÖ Extension ƒë√£ kh·ªüi ƒë·ªông th√†nh c√¥ng');
        } catch (error) {
            console.error('‚ùå L·ªói kh·ªüi ƒë·ªông extension:', error);
        }
    }
    
    async loadSettings() {
        try {
            const result = await chrome.storage.sync.get({
                salary: 8000000,
                salaryUnit: 'month',
                taxType: 'after',
                displayUnit: 'auto',
                enabled: true,
                disableBuyButtons: false
            });
            this.settings = result;
            console.log('üìã ƒê√£ t·∫£i c√†i ƒë·∫∑t:', this.settings);
        } catch (error) {
            console.error('‚ùå L·ªói khi t·∫£i c√†i ƒë·∫∑t:', error);
        }
    }
    
    setupMessageListener() {
        chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
            console.log('üì® Nh·∫≠n tin nh·∫Øn:', request);
            
            if (request.action === 'updateSettings') {
                this.settings = request.settings;
                this.refreshAllPrices();
                this.refreshBuyButtonStatus();
                sendResponse({status: 'updated'});
            } else if (request.action === 'toggleExtension') {
                this.settings.enabled = request.enabled;
                if (request.enabled) {
                    this.refreshAllPrices();
                    this.refreshBuyButtonStatus();
                } else {
                    this.removeAllTimeDisplays();
                    this.enableAllBuyButtons();
                }
                sendResponse({status: 'toggled'});
            }
        });
    }
    
    startProcessing() {
        if (!this.settings.enabled) {
            console.log('‚è∏Ô∏è Extension ƒë√£ t·∫Øt');
            return;
        }
        
        console.log('üîç B·∫Øt ƒë·∫ßu x·ª≠ l√Ω...');
        
        // X·ª≠ l√Ω gi√° v·ªõi nhi·ªÅu l·∫ßn th·ª≠
        this.processAllPrices();
        setTimeout(() => this.processAllPrices(), 2000);
        setTimeout(() => this.processAllPrices(), 5000);
        setTimeout(() => this.processAllPrices(), 10000);
        
        // Thi·∫øt l·∫≠p x·ª≠ l√Ω n√∫t mua h√†ng
        this.refreshBuyButtonStatus();
        setTimeout(() => this.refreshBuyButtonStatus(), 3000);
        setTimeout(() => this.refreshBuyButtonStatus(), 6000);
        setTimeout(() => this.refreshBuyButtonStatus(), 12000);
        
        // Theo d√µi thay ƒë·ªïi DOM
        this.setupObserver();
    }
    
    refreshBuyButtonStatus() {
        if (this.settings.disableBuyButtons) {
            this.disableAllBuyButtons();
        } else {
            this.enableAllBuyButtons();
            this.setupBuyButtonWarnings();
        }
    }
    
    disableAllBuyButtons() {
        console.log('üõ°Ô∏è V√¥ hi·ªáu h√≥a t·∫•t c·∫£ n√∫t mua h√†ng...');
        
        let disabledCount = 0;
        
        this.buyButtonSelectors.forEach(selector => {
            try {
                let elements = [];
                
                if (selector.includes(':contains')) {
                    const baseSelector = selector.split(':contains')[0];
                    const text = selector.match(/\("([^"]+)"\)/)?.[1];
                    
                    if (baseSelector && text) {
                        const candidates = document.querySelectorAll(baseSelector);
                        elements = Array.from(candidates).filter(el => 
                            el.textContent && el.textContent.toLowerCase().includes(text.toLowerCase())
                        );
                    }
                } else {
                    elements = Array.from(document.querySelectorAll(selector));
                }
                
                elements.forEach(button => {
                    if (!this.disabledButtons.has(button)) {
                        this.disableBuyButton(button);
                        this.disabledButtons.add(button);
                        disabledCount++;
                    }
                });
            } catch (error) {
                console.warn(`‚ö†Ô∏è L·ªói v·ªõi buy button selector "${selector}":`, error);
            }
        });
        
        console.log(`üõ°Ô∏è ƒê√£ v√¥ hi·ªáu h√≥a ${disabledCount} n√∫t mua h√†ng`);
    }
    
    disableBuyButton(button) {
        // L∆∞u tr·∫°ng th√°i ban ƒë·∫ßu
        if (!button.dataset.vnOriginalDisabled) {
            button.dataset.vnOriginalDisabled = button.disabled || 'false';
            button.dataset.vnOriginalStyle = button.style.cssText || '';
            button.dataset.vnOriginalTitle = button.title || '';
        }
        
        // V√¥ hi·ªáu h√≥a n√∫t
        button.disabled = true;
        button.style.opacity = '0.4';
        button.style.cursor = 'not-allowed';
        button.style.pointerEvents = 'none';
        button.style.filter = 'grayscale(100%)';
        button.title = 'üõ°Ô∏è N√∫t mua h√†ng ƒë√£ b·ªã v√¥ hi·ªáu h√≥a ƒë·ªÉ b·∫£o v·ªá t√†i ch√≠nh c·ªßa b·∫°n. B·∫°n c√≥ th·ªÉ t·∫Øt t√≠nh nƒÉng n√†y trong c√†i ƒë·∫∑t extension.';
        
        // Th√™m l·ªõp CSS ƒë·ªÉ nh·∫≠n di·ªán
        button.classList.add('vn-disabled-button');
        
        // NgƒÉn ch·∫∑n click events
        const clickHandler = (e) => {
            e.preventDefault();
            e.stopPropagation();
            e.stopImmediatePropagation();
            
            // Hi·ªÉn th·ªã th√¥ng b√°o
            this.showDisabledButtonMessage();
            return false;
        };
        
        button.addEventListener('click', clickHandler, { capture: true });
        button.dataset.vnClickHandler = 'added';
    }
    
    showDisabledButtonMessage() {
        alert('üõ°Ô∏è B·∫¢O V·ªÜ T√ÄI CH√çNH\n\nN√∫t mua h√†ng ƒë√£ ƒë∆∞·ª£c v√¥ hi·ªáu h√≥a ƒë·ªÉ gi√∫p b·∫°n ki·ªÉm so√°t chi ti√™u.\n\nN·∫øu b·∫°n th·ª±c s·ª± mu·ªën mua s·∫Øm, h√£y t·∫Øt t√≠nh nƒÉng n√†y trong c√†i ƒë·∫∑t extension.');
    }
    
    enableAllBuyButtons() {
        console.log('üîì B·∫≠t l·∫°i t·∫•t c·∫£ n√∫t mua h√†ng...');
        
        const disabledButtons = document.querySelectorAll('.vn-disabled-button');
        let enabledCount = 0;
        
        disabledButtons.forEach(button => {
            this.enableBuyButton(button);
            enabledCount++;
        });
        
        // Reset WeakSet
        this.disabledButtons = new WeakSet();
        
        console.log(`üîì ƒê√£ b·∫≠t l·∫°i ${enabledCount} n√∫t mua h√†ng`);
    }
    
    enableBuyButton(button) {
        // Kh√¥i ph·ª•c tr·∫°ng th√°i ban ƒë·∫ßu
        if (button.dataset.vnOriginalDisabled !== undefined) {
            button.disabled = button.dataset.vnOriginalDisabled === 'true';
            button.style.cssText = button.dataset.vnOriginalStyle || '';
            button.title = button.dataset.vnOriginalTitle || '';
            
            // X√≥a d·ªØ li·ªáu l∆∞u tr·ªØ
            delete button.dataset.vnOriginalDisabled;
            delete button.dataset.vnOriginalStyle;
            delete button.dataset.vnOriginalTitle;
            delete button.dataset.vnClickHandler;
        }
        
        // X√≥a l·ªõp CSS
        button.classList.remove('vn-disabled-button');
    }
    
    setupObserver() {
        if (this.observer) {
            this.observer.disconnect();
        }
        
        this.observer = new MutationObserver((mutations) => {
            if (!this.settings.enabled) return;
            
            let shouldProcessPrices = false;
            let shouldProcessButtons = false;
            
            mutations.forEach(mutation => {
                if (mutation.type === 'childList') {
                    mutation.addedNodes.forEach(node => {
                        if (node.nodeType === Node.ELEMENT_NODE) {
                            if (this.hasMatchingSelector(node)) {
                                shouldProcessPrices = true;
                            }
                            if (this.hasBuyButton(node)) {
                                shouldProcessButtons = true;
                            }
                        }
                    });
                }
            });
            
            if (shouldProcessPrices) {
                clearTimeout(this.debounceTimer);
                this.debounceTimer = setTimeout(() => {
                    this.processAllPrices();
                }, 1500);
            }
            
            if (shouldProcessButtons) {
                setTimeout(() => this.refreshBuyButtonStatus(), 1000);
            }
        });
        
        this.observer.observe(document.body, {
            childList: true,
            subtree: true
        });
        
        console.log('üëÄ ƒê√£ thi·∫øt l·∫≠p observer');
    }
    
    hasBuyButton(element) {
        return this.buyButtonSelectors.some(selector => {
            try {
                if (selector.includes(':contains')) {
                    const baseSelector = selector.split(':contains')[0];
                    const text = selector.match(/\("([^"]+)"\)/)?.[1];
                    
                    if (element.matches && element.matches(baseSelector)) {
                        return element.textContent && element.textContent.toLowerCase().includes(text?.toLowerCase() || '');
                    }
                    
                    if (element.querySelector) {
                        const candidates = element.querySelectorAll(baseSelector);
                        return Array.from(candidates).some(el => 
                            el.textContent && el.textContent.toLowerCase().includes(text?.toLowerCase() || '')
                        );
                    }
                } else {
                    return element.matches && element.matches(selector) || 
                           element.querySelector && element.querySelector(selector);
                }
            } catch (e) {
                return false;
            }
        });
    }
    
    setupBuyButtonWarnings() {
        if (this.settings.disableBuyButtons) {
            return; // Kh√¥ng thi·∫øt l·∫≠p warning n·∫øu ƒë√£ disable buttons
        }
        
        console.log('üõí Thi·∫øt l·∫≠p c·∫£nh b√°o n√∫t mua h√†ng...');
        
        let processedCount = 0;
        
        this.buyButtonSelectors.forEach(selector => {
            try {
                let elements = [];
                
                if (selector.includes(':contains')) {
                    const baseSelector = selector.split(':contains')[0];
                    const text = selector.match(/\("([^"]+)"\)/)?.[1];
                    
                    if (baseSelector && text) {
                        const candidates = document.querySelectorAll(baseSelector);
                        elements = Array.from(candidates).filter(el => 
                            el.textContent && el.textContent.toLowerCase().includes(text.toLowerCase())
                        );
                    }
                } else {
                    elements = Array.from(document.querySelectorAll(selector));
                }
                
                elements.forEach(button => {
                    if (!this.processedButtons.has(button) && !button.classList.contains('vn-disabled-button')) {
                        this.addBuyButtonWarning(button);
                        this.processedButtons.add(button);
                        processedCount++;
                    }
                });
            } catch (error) {
                console.warn(`‚ö†Ô∏è L·ªói v·ªõi buy button selector "${selector}":`, error);
            }
        });
        
        console.log(`üõí ƒê√£ x·ª≠ l√Ω ${processedCount} n√∫t mua h√†ng`);
    }
    
    addBuyButtonWarning(button) {
        console.log('üîî Th√™m c·∫£nh b√°o cho n√∫t:', button.textContent?.trim());
        
        const originalHandler = (event) => {
            console.log('üõí N√∫t mua h√†ng ƒë∆∞·ª£c nh·∫•n!', button);
            
            const price = this.findNearestPrice(button);
            console.log('üí∞ Gi√° t√¨m th·∫•y:', price);
            
            if (price && price > 1000) {
                const dailyRate = this.calculateDailyRate();
                const daysNeeded = price / dailyRate;
                
                console.log('üìä S·ªë ng√†y c·∫ßn l√†m vi·ªác:', daysNeeded);
                
                if (daysNeeded >= 0.3) { // Lowered threshold cho mindful buying
                    const reminderData = this.getReminderData(daysNeeded);
                    const shouldContinue = this.showBuyWarning(price, daysNeeded, reminderData);
                    
                    if (!shouldContinue) {
                        event.preventDefault();
                        event.stopPropagation();
                        event.stopImmediatePropagation();
                        return false;
                    }
                }
            }
            
            return true;
        };
        
        button.addEventListener('click', originalHandler, true);
        button.setAttribute('data-vn-warning-added', 'true');
    }
    
    findNearestPrice(button) {
        console.log('üîç T√¨m ki·∫øm gi√° g·∫ßn n√∫t mua:', button);
        
        const containers = [
            button.closest('[class*="product"]'),
            button.closest('[class*="item"]'),
            button.closest('.pdp-mod-product-info-section'),
            button.closest('[class*="price"]'),
            button.closest('[class*="info"]'),
            button.closest('[class*="detail"]'),
            button.closest('article'),
            button.closest('section'),
            button.closest('div'),
            button.parentElement,
            document
        ].filter(Boolean);
        
        for (const container of containers) {
            // T√¨m t·ª´ time display tr∆∞·ªõc
            const timeDisplay = container.querySelector('.vn-price-time-container');
            if (timeDisplay && timeDisplay.dataset.price) {
                const price = parseFloat(timeDisplay.dataset.price);
                console.log('üí∞ T√¨m th·∫•y gi√° t·ª´ time display:', price);
                return price;
            }
            
            // T√¨m t·ª´ site configs
            const configs = this.getSiteConfigs();
            for (const config of configs) {
                const priceElement = container.querySelector(config.currentPriceSelector);
                if (priceElement) {
                    const price = this.extractPrice(this.getElementText(priceElement), config);
                    if (price && price > 1000) {
                        console.log('üí∞ T√¨m th·∫•y gi√° t·ª´ selector:', price);
                        return price;
                    }
                }
            }
            
            // Fallback: t√¨m text c√≥ ch·ª©a ‚Ç´
            const allElements = container.querySelectorAll('*');
            for (const el of allElements) {
                const text = el.textContent || '';
                if (text.includes('‚Ç´') && el.children.length === 0) {
                    const price = this.extractPriceFromText(text);
                    if (price && price > 1000) {
                        console.log('üí∞ T√¨m th·∫•y gi√° t·ª´ fallback:', price);
                        return price;
                    }
                }
            }
        }
        
        console.log('‚ùå Kh√¥ng t√¨m th·∫•y gi√°');
        return null;
    }
    
    extractPriceFromText(text) {
        // Improved price extraction based on actual patterns
        const cleanText = text.replace(/[^\d.,]/g, '');
        if (!cleanText) return null;
        
        let price = cleanText;
        
        // Handle different number formats
        if (price.includes(',') && price.includes('.')) {
            const lastComma = price.lastIndexOf(',');
            const lastDot = price.lastIndexOf('.');
            price = lastComma > lastDot ? 
                price.replace(/\./g, '').replace(',', '.') : 
                price.replace(/,/g, '');
        } 
        // Only comma
        else if (price.includes(',')) {
            const parts = price.split(',');
            price = parts.length === 2 && parts[1].length <= 2 ? 
                price.replace(',', '.') : price.replace(/,/g, '');
        } 
        // Only dot
        else if (price.includes('.')) {
            const parts = price.split('.');
            if (parts.length > 2 || (parts.length === 2 && parts[1].length > 2)) {
                price = price.replace(/\./g, '');
            }
        }
        
        const numPrice = parseFloat(price);
        return (numPrice >= 1000 && numPrice <= 1000000000) ? numPrice : null;
    }
    
    showBuyWarning(price, daysNeeded, reminderData) {
        const timeWorked = this.formatTimeDisplay(daysNeeded * 8);
        const formattedPrice = new Intl.NumberFormat('vi-VN', {
            style: 'currency',
            currency: 'VND'
        }).format(price);
        
        let message = `${reminderData.emoji} MUA S·∫ÆM C√ì √ù TH·ª®C\n\n`;
        message += `üí∞ Gi√° s·∫£n ph·∫©m: ${formattedPrice}\n`;
        message += `‚è∞ Th·ªùi gian l√†m vi·ªác: ${timeWorked}\n`;
        message += `üìä M·ª©c ƒë·ªô: ${reminderData.levelName}\n\n`;
        
        if (reminderData.reminder) {
            message += `üß† C√¢u h·ªèi ƒë·ªÉ suy ng·∫´m:\n${reminderData.reminder}\n\n`;
        }
        
        message += `ü§î H√£y d√†nh v√†i gi√¢y t·ª± h·ªèi:\n`;
        message += `‚Ä¢ T√¥i c√≥ th·ª±c s·ª± c·∫ßn m√≥n n√†y kh√¥ng?\n`;
        message += `‚Ä¢ C√≥ l·ª±a ch·ªçn n√†o t·ªët h∆°n kh√¥ng?\n`;
        message += `‚Ä¢ M√≥n n√†y c√≥ ƒë√°ng s·ªë th·ªùi gian l√†m vi·ªác n√†y?\n`;
        message += `‚Ä¢ T√¥i s·∫Ω c·∫£m th·∫•y th·∫ø n√†o sau khi mua?\n\n`;
        message += `‚ùì Sau khi suy nghƒ© c·∫©n th·∫≠n, b·∫°n c√≥ mu·ªën ti·∫øp t·ª•c mua kh√¥ng?`;
        
        const result = confirm(message);
        console.log('ü§î Quy·∫øt ƒë·ªãnh mindful buying:', result ? 'Ti·∫øp t·ª•c mua' : 'H·ªßy b·ªè ƒë·ªÉ suy nghƒ© th√™m');
        
        // Log ƒë·ªÉ theo d√µi hi·ªáu qu·∫£
        if (!result) {
            console.log('üíö Mindful buying th√†nh c√¥ng! ƒê√£ ngƒÉn ch·∫∑n m·ªôt l·∫ßn mua s·∫Øm b·ªëc ƒë·ªìng.');
        }
        
        return result;
    }
    
    removeBuyButtonWarnings() {
        const buttons = document.querySelectorAll('[data-vn-warning-added]');
        console.log(`üóëÔ∏è X√≥a c·∫£nh b√°o kh·ªèi ${buttons.length} n√∫t`);
        buttons.forEach(button => {
            button.removeAttribute('data-vn-warning-added');
        });
        this.processedButtons = new WeakSet();
    }
    
    calculateDailyRate() {
        let dailyRate = this.settings.salary;
        
        switch (this.settings.salaryUnit) {
            case 'year':
                dailyRate = this.settings.salary / (12 * 22);
                break;
            case 'month':
                dailyRate = this.settings.salary / 22;
                break;
            case 'hour':
                dailyRate = this.settings.salary * 8;
                break;
            case 'day':
            default:
                dailyRate = this.settings.salary;
                break;
        }
        
        if (this.settings.taxType === 'before') {
            dailyRate = dailyRate * 0.85; // ∆Ø·ªõc t√≠nh thu·∫ø v√† b·∫£o hi·ªÉm
        }
        
        return dailyRate;
    }
    
    getReminderData(daysNeeded) {
        for (const [level, data] of Object.entries(this.reminderLevels)) {
            const [min, max] = data.range;
            if (daysNeeded >= min && daysNeeded <= max) {
                const randomEmoji = data.emoji[Math.floor(Math.random() * data.emoji.length)];
                const randomReminder = data.reminders.length > 0 ? 
                    data.reminders[Math.floor(Math.random() * data.reminders.length)] : null;
                
                return {
                    level: parseInt(level),
                    levelName: data.level,
                    emoji: randomEmoji,
                    reminder: randomReminder,
                    color: data.color
                };
            }
        }
        
        return {
            level: 1,
            levelName: 'An to√†n',
            emoji: 'üíö',
            reminder: null,
            color: '#10b981'
        };
    }
    
    hasMatchingSelector(element) {
        const configs = this.getSiteConfigs();
        return configs.some(config => {
            try {
                return element.matches && element.matches(config.currentPriceSelector) || 
                       element.querySelector && element.querySelector(config.currentPriceSelector);
            } catch (e) {
                return false;
            }
        });
    }
    
    getSiteConfigs() {
        const hostname = window.location.hostname.toLowerCase();
        
        if (hostname.includes('shopee.vn')) {
            return [{
                name: 'Shopee',
                // Updated selectors based on actual HTML code
                currentPriceSelector: '.IZPeQz.B67UQ0, .IZPeQz, .pqTWkA, ._1w0TcH, .GCKXwL, div.jRlVo0 > div:first-child',
                excludeSelectors: ['.ZA5sW5', '.mq6YDA', '._1w9jWR', '.ZA5sW5[style*="margin-left"]'],
                priceRegex: /‚Ç´\s*([\d.,\s]+)/,
                containerSelector: '.jRlVo0, .flex, .product-briefing'
            }];
        }
        
        if (hostname.includes('lazada.vn')) {
            return [{
                name: 'Lazada',
                // Updated based on actual HTML code
                currentPriceSelector: '.pdp-price.pdp-price_color_orange, .pdp-price_color_orange, .pdp-price.pdp-price_type_normal',
                excludeSelectors: ['.pdp-price_type_deleted', '.pdp-price_color_lightgray', '.old-price'],
                priceRegex: /‚Ç´\s*([\d.,\s]+)/,
                containerSelector: '.pdp-product-price'
            }];
        }
        
        if (hostname.includes('thegioididong.com') || hostname.includes('dienmayxanh.com')) {
            return [{
                name: 'TGDD/DMX',
                // Updated based on actual HTML code
                currentPriceSelector: '.box-price-present, .price-current, .box-price-new, p.box-price-present',
                excludeSelectors: ['.box-price-old', '.price-old'],
                priceRegex: /([\d.,\s]+)‚Ç´/,
                containerSelector: '.box-price'
            }];
        }
        
        if (hostname.includes('tiki.vn')) {
            return [{
                name: 'Tiki',
                currentPriceSelector: '.product-price__current-price, .current-price',
                excludeSelectors: ['.product-price__list-price', '.list-price'],
                priceRegex: /([\d.,\s]+)‚Ç´/,
                containerSelector: '.product-price'
            }];
        }
        
        if (hostname.includes('sendo.vn')) {
            return [{
                name: 'Sendo',
                currentPriceSelector: '.product_price_final, .price-final',
                excludeSelectors: ['.product_price_market', '.price-market'],
                priceRegex: /([\d.,\s]+)‚Ç´/,
                containerSelector: '.product_price'
            }];
        }
        
        if (hostname.includes('fptshop.com.vn')) {
            return [{
                name: 'FPT Shop',
                // Updated based on actual HTML code
                currentPriceSelector: '.text-black-opacity-100.h4-bold, span.text-black-opacity-100, .product-price-current',
                excludeSelectors: ['.line-through', '.price-old', '.text-neutral-gray-5'],
                priceRegex: /([\d.,\s]+)\s*‚Ç´/,
                containerSelector: '.flex.flex-col'
            }];
        }
        
        if (hostname.includes('cellphones.com.vn')) {
            return [{
                name: 'Cellphones',
                // Updated based on actual HTML code
                currentPriceSelector: '.sale-price, div.sale-price, .product-price',
                excludeSelectors: ['.base-price', '.old-price', 'del.base-price'],
                priceRegex: /([\d.,\s]+)ƒë/,
                containerSelector: '.is-flex.is-align-items-center'
            }];
        }
        
        if (hostname.includes('hasaki.vn')) {
            return [{
                name: 'Hasaki',
                // Updated based on actual HTML code
                currentPriceSelector: '.text-orange.text-lg.font-bold, span.text-orange, .price-current',
                excludeSelectors: ['.line-through', '.price-old'],
                priceRegex: /([\d.,\s]+)\s*‚Ç´/,
                containerSelector: '.flex.items-center.gap-2\\.5'
            }];
        }
        
        if (hostname.includes('hoanghamobile.com')) {
            return [{
                name: 'Hoang Ha Mobile',
                // Updated based on actual HTML code
                currentPriceSelector: 'strong.price, .price-current, strong[class="price"]',
                excludeSelectors: ['.old-price', '.strike'],
                priceRegex: /([\d.,\s]+)\s*‚Ç´/,
                containerSelector: '.price'
            }];
        }
        
        if (hostname.includes('bachhoaxanh.com')) {
            return [{
                name: 'Bach Hoa Xanh',
                currentPriceSelector: '.box-price-present, .price-current',
                excludeSelectors: ['.box-price-old', '.price-old'],
                priceRegex: /([\d.,\s]+)‚Ç´/,
                containerSelector: '.box-price'
            }];
        }
        
        if (hostname.includes('fahasa.com')) {
            return [{
                name: 'Fahasa',
                currentPriceSelector: '.product-price-current, .price-current',
                excludeSelectors: ['.product-price-old', '.price-old'],
                priceRegex: /([\d.,\s]+)‚Ç´/,
                containerSelector: '.product-price'
            }];
        }
        
        if (hostname.includes('nguyenkim.com')) {
            return [{
                name: 'Nguyen Kim',
                currentPriceSelector: '.product-price-current, .price-current',
                excludeSelectors: ['.product-price-old', '.price-old'],
                priceRegex: /([\d.,\s]+)‚Ç´/,
                containerSelector: '.product-price'
            }];
        }
        
        // Generic fallback
        return [{
            name: 'Generic',
            currentPriceSelector: '.price:not(.old):not(.before):not(.original), [class*="price"]:not([class*="old"]):not([class*="before"])',
            excludeSelectors: ['.price.old', '.price.before', '.price.original', '[class*="old"]', '[class*="before"]'],
            priceRegex: /‚Ç´?\s*([\d.,\s]+)/,
            containerSelector: '.price, [class*="price"]'
        }];
    }
    
    processAllPrices() {
        let processedCount = 0;
        const configs = this.getSiteConfigs();
        
        console.log('üîç ƒêang x·ª≠ l√Ω v·ªõi configs:', configs.map(c => c.name));
        
        configs.forEach(config => {
            try {
                const elements = document.querySelectorAll(config.currentPriceSelector);
                console.log(`[${config.name}] T√¨m th·∫•y ${elements.length} elements v·ªõi selector: ${config.currentPriceSelector}`);
                
                elements.forEach(element => {
                    if (this.processPriceElement(element, config)) {
                        processedCount++;
                    }
                });
            } catch (error) {
                console.warn(`‚ö†Ô∏è L·ªói v·ªõi config "${config.name}":`, error);
            }
        });
        
        if (processedCount > 0) {
            console.log(`üí∞ ƒê√£ x·ª≠ l√Ω ${processedCount} gi√°`);
        } else {
            console.log('‚ÑπÔ∏è Kh√¥ng t√¨m th·∫•y gi√° m·ªõi ƒë·ªÉ x·ª≠ l√Ω (c√≥ th·ªÉ ƒë√£ x·ª≠ l√Ω r·ªìi)');
        }
    }
    
    processPriceElement(element, config) {
        if (this.processedElements.has(element)) return false;
        if (this.hasTimeDisplay(element)) return false;
        if (this.isExcludedElement(element, config)) {
            console.log('‚è≠Ô∏è B·ªè qua element b·ªã lo·∫°i tr·ª´:', element.textContent?.trim());
            return false;
        }
        
        const priceText = this.getElementText(element);
        const price = this.extractPrice(priceText, config);
        
        console.log('üí∞ ƒêang x·ª≠ l√Ω element:', {
            text: priceText?.trim(),
            extractedPrice: price,
            className: element.className,
            tagName: element.tagName,
            config: config.name
        });
        
        if (price && price > 1000) {
            this.processedElements.add(element);
            this.addTimeDisplay(element, price);
            return true;
        }
        
        return false;
    }
    
    hasTimeDisplay(element) {
        const parent = element.parentElement;
        return element.querySelector('.vn-price-time-container') ||
               element.nextElementSibling?.classList.contains('vn-price-time-container') ||
               (parent && parent.querySelector('.vn-price-time-container'));
    }
    
    isExcludedElement(element, config) {
        const className = element.className || '';
        const parentClass = element.parentElement ? element.parentElement.className || '' : '';
        
        // Ki·ªÉm tra excludeSelectors
        for (const excludeSelector of config.excludeSelectors) {
            try {
                if (element.matches(excludeSelector) || 
                    (element.parentElement && element.parentElement.matches(excludeSelector))) {
                    return true;
                }
            } catch (e) {
                // Ignore selector errors
            }
        }
        
        // Ki·ªÉm tra text-decoration
        const style = window.getComputedStyle(element);
        if (style.textDecoration.includes('line-through')) {
            return true;
        }
        
        // Ki·ªÉm tra class names cho gi√° c≈©
        const oldPriceIndicators = ['old', 'before', 'original', 'crossed', 'strike', 'deleted', 'lightgray', 'line-through', 'discount'];
        for (const indicator of oldPriceIndicators) {
            if (className.toLowerCase().includes(indicator) || 
                parentClass.toLowerCase().includes(indicator)) {
                return true;
            }
        }
        
        return false;
    }
    
    getElementText(element) {
        let text = element.textContent || element.innerText || '';
        
        if (!text.trim()) {
            text = element.getAttribute('data-price') || 
                   element.getAttribute('title') || 
                   element.getAttribute('alt') || '';
        }
        
        return text;
    }
    
    extractPrice(text, config) {
        if (!text || typeof text !== 'string') return null;
        
        let match;
        if (config.priceRegex) {
            match = text.match(config.priceRegex);
            if (match && match[1]) {
                text = match[1];
            }
        }
        
        // Remove all non-numeric characters except comma, dot and whitespace
        const cleanText = text.replace(/[^\d.,\s]/g, '');
        if (!cleanText) return null;
        
        // Remove whitespace
        let price = cleanText.replace(/\s/g, '');
        
        // Handle number formats
        if (price.includes(',') && price.includes('.')) {
            const lastComma = price.lastIndexOf(',');
            const lastDot = price.lastIndexOf('.');
            
            if (lastComma > lastDot) {
                // 1.234,56 format
                price = price.replace(/\./g, '').replace(',', '.');
            } else {
                // 1,234.56 format
                price = price.replace(/,/g, '');
            }
        } else if (price.includes(',')) {
            const parts = price.split(',');
            if (parts.length === 2 && parts[1].length <= 2) {
                // Decimal comma: 123,45
                price = price.replace(',', '.');
            } else {
                // Thousand separator: 1,234,567
                price = price.replace(/,/g, '');
            }
        } else if (price.includes('.')) {
            const parts = price.split('.');
            if (parts.length === 2 && parts[1].length <= 2) {
                // Decimal dot: 123.45 - keep as is
            } else {
                // Thousand separator: 1.234.567
                price = price.replace(/\./g, '');
            }
        }
        
        const numPrice = parseFloat(price);
        return (numPrice >= 1000 && numPrice <= 1000000000) ? numPrice : null;
    }
    
    addTimeDisplay(element, price) {
        const dailyRate = this.calculateDailyRate();
        const daysNeeded = price / dailyRate;
        
        const hourlyRate = this.calculateHourlyRate();
        const hoursNeeded = price / hourlyRate;
        
        const timeWorked = this.formatTimeDisplay(hoursNeeded);
        const reminderData = this.getReminderData(daysNeeded);
        
        const timeDisplay = this.createTimeDisplay(timeWorked, reminderData, price);
        
        const insertPosition = this.findBestInsertPosition(element);
        
        try {
            insertPosition.parent.insertBefore(timeDisplay, insertPosition.nextSibling);
            console.log('‚úÖ ƒê√£ th√™m time display:', timeWorked, 'cho gi√°:', price.toLocaleString('vi-VN'), 'VNƒê, m·ª©c ƒë·ªô:', reminderData.levelName);
        } catch (error) {
            console.warn('‚ùå L·ªói khi th√™m time display:', error);
            try {
                element.parentElement.appendChild(timeDisplay);
            } catch (e) {
                console.warn('‚ùå Kh√¥ng th·ªÉ th√™m time display:', e);
            }
        }
    }
    
    calculateHourlyRate() {
        let hourlyRate = this.settings.salary;
        
        switch (this.settings.salaryUnit) {
            case 'year':
                hourlyRate = this.settings.salary / (12 * 22 * 8);
                break;
            case 'month':
                hourlyRate = this.settings.salary / (22 * 8);
                break;
            case 'day':
                hourlyRate = this.settings.salary / 8;
                break;
            case 'hour':
                hourlyRate = this.settings.salary;
                break;
        }
        
        if (this.settings.taxType === 'before') {
            hourlyRate = hourlyRate * 0.85;
        }
        
        return hourlyRate;
    }
    
    findBestInsertPosition(element) {
        const hostname = window.location.hostname.toLowerCase();
        
        if (hostname.includes('shopee.vn')) {
            // Optimized for Shopee's structure
            const container = element.closest('.jRlVo0') || 
                            element.closest('.flex') || 
                            element.parentElement;
            return {
                parent: container,
                nextSibling: null
            };
        }
        
        if (hostname.includes('lazada.vn')) {
            return {
                parent: element.parentElement,
                nextSibling: element.nextSibling
            };
        }
        
        if (hostname.includes('thegioididong.com') || hostname.includes('dienmayxanh.com')) {
            return {
                parent: element.parentElement,
                nextSibling: element.nextSibling
            };
        }
        
        if (hostname.includes('fptshop.com.vn')) {
            const container = element.closest('.flex.flex-col') || element.parentElement;
            return {
                parent: container,
                nextSibling: null
            };
        }
        
        if (hostname.includes('cellphones.com.vn')) {
            return {
                parent: element.parentElement,
                nextSibling: element.nextSibling
            };
        }
        
        if (hostname.includes('hasaki.vn')) {
            const container = element.closest('.flex.items-center') || element.parentElement;
            return {
                parent: container,
                nextSibling: null
            };
        }
        
        if (hostname.includes('hoanghamobile.com')) {
            return {
                parent: element.parentElement,
                nextSibling: element.nextSibling
            };
        }
        
        // Generic fallback
        return {
            parent: element.parentElement || document.body,
            nextSibling: element.nextSibling
        };
    }
    
    formatTimeDisplay(hoursNeeded) {
        const displayUnit = this.settings.displayUnit;
        
        if (displayUnit === 'hours') {
            if (hoursNeeded < 1) {
                return `${Math.round(hoursNeeded * 60)}p`;
            }
            const hours = Math.round(hoursNeeded * 10) / 10;
            return `${hours}h`;
        }
        
        if (displayUnit === 'days') {
            const days = Math.round((hoursNeeded / 8) * 10) / 10;
            return `${days} ng√†y`;
        }
        
        if (displayUnit === 'months') {
            const months = Math.round((hoursNeeded / 176) * 10) / 10;
            return `${months} th√°ng`;
        }
        
        if (displayUnit === 'years') {
            const years = Math.round((hoursNeeded / 2112) * 100) / 100;
            return `${years} nƒÉm`;
        }
        
        // Auto mode - hi·ªÉn th·ªã th√¥ng minh
        if (hoursNeeded < 1) {
            return `${Math.round(hoursNeeded * 60)}p`;
        } else if (hoursNeeded < 8) {
            const hours = Math.floor(hoursNeeded);
            const minutes = Math.round((hoursNeeded - hours) * 60);
            return minutes > 0 ? `${hours}h${minutes}p` : `${hours}h`;
        } else if (hoursNeeded < 176) { // < 1 th√°ng
            const days = Math.floor(hoursNeeded / 8);
            const remainingHours = Math.round(hoursNeeded % 8);
            return remainingHours > 0 ? `${days}d${remainingHours}h` : `${days}d`;
        } else if (hoursNeeded < 2112) { // < 1 nƒÉm
            const months = Math.floor(hoursNeeded / 176);
            const remainingDays = Math.round((hoursNeeded % 176) / 8);
            return remainingDays > 0 ? `${months}th${remainingDays}d` : `${months}th`;
        } else {
            const years = Math.floor(hoursNeeded / 2112);
            const remainingMonths = Math.round((hoursNeeded % 2112) / 176);
            return remainingMonths > 0 ? `${years}y${remainingMonths}th` : `${years}y`;
        }
    }
    
    createTimeDisplay(timeWorked, reminderData, price) {
        const container = document.createElement('div');
        container.className = 'vn-price-time-container';
        container.dataset.price = price;
        
        const timeDisplay = document.createElement('div');
        timeDisplay.className = `vn-price-time vn-level-${reminderData.level}`;
        timeDisplay.style.setProperty('--level-color', reminderData.color);
        
        timeDisplay.innerHTML = `
            <span class="vn-emoji">${reminderData.emoji}</span>
            <span class="vn-time">‚è∞ ${timeWorked}</span>
        `;
        
        // Th√™m tooltip n·∫øu c√≥ reminder
        if (reminderData.reminder) {
            const tooltip = document.createElement('div');
            tooltip.className = 'vn-tooltip';
            tooltip.textContent = reminderData.reminder;
            container.appendChild(tooltip);
        }
        
        container.appendChild(timeDisplay);
        
        // Event listeners cho tooltip
        if (reminderData.reminder) {
            let hoverTimeout;
            
            timeDisplay.addEventListener('mouseenter', () => {
                clearTimeout(hoverTimeout);
                const tooltip = container.querySelector('.vn-tooltip');
                if (tooltip) {
                    tooltip.classList.add('show');
                }
            });
            
            timeDisplay.addEventListener('mouseleave', () => {
                hoverTimeout = setTimeout(() => {
                    const tooltip = container.querySelector('.vn-tooltip');
                    if (tooltip) {
                        tooltip.classList.remove('show');
                    }
                }, 300);
            });
        }
        
        return container;
    }
    
    refreshAllPrices() {
        console.log('üîÑ L√†m m·ªõi t·∫•t c·∫£ gi√°...');
        this.removeAllTimeDisplays();
        this.processedElements = new WeakSet();
        setTimeout(() => this.processAllPrices(), 500);
    }
    
    removeAllTimeDisplays() {
        const timeDisplays = document.querySelectorAll('.vn-price-time-container');
        timeDisplays.forEach(display => display.remove());
        console.log(`üóëÔ∏è ƒê√£ x√≥a ${timeDisplays.length} time displays`);
    }
}

// Kh·ªüi ƒë·ªông extension v·ªõi error handling
console.log('üîå Vietnamese Shopping Helper v1.3.1 - Content Script loaded');

if (!window.vnShoppingHelperInitialized) {
    window.vnShoppingHelperInitialized = true;
    
    try {
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', () => {
                new VietnameseShoppingHelper();
            });
        } else {
            new VietnameseShoppingHelper();
        }
    } catch (error) {
        console.error('‚ùå L·ªói kh·ªüi ƒë·ªông Vietnamese Shopping Helper:', error);
    }
}
